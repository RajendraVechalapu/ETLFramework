USE [sqlperftool]
GO
/****** Object:  Table [dbo].[perfqueries]    Script Date: 27/11/2019 3:11:31 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[perfqueries](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[perfname] [varchar](150) NULL,
	[perfquery] [nvarchar](max) NULL,
 CONSTRAINT [PK_perfqueries] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET IDENTITY_INSERT [dbo].[perfqueries] ON 
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (1, N'fetch_os_memory_info', N'SELECT(total_physical_memory_kb / 1024.0) / 1024.0 AS [Physical Memory (GB)], 
      (available_physical_memory_kb / 1024.0) / 1024.0 AS [Available Memory (GB)], 
      (total_page_file_kb / 1024) / 1024.0 AS [Total Page File (GB)], 
      (available_page_file_kb / 1024) / 1024.0 AS [Available Page File (GB)], 
      (system_cache_kb / 1024) / 1024.0 AS [System Cache (GB)], 
      100 - (100 * CAST(available_physical_memory_kb AS DECIMAL(18, 3)) / CAST(total_physical_memory_kb AS DECIMAL(18, 3))) AS ''Available_Physical_Memory_Percentage_Used'', 
      system_memory_state_desc AS [System Memory State],
	  ''You want to see "Available physical memory is high" for System Memory State
This indicates that you are not under external memory pressure.

Percentage_Used: 100% for a long time indicates a memory pressure

Good basic information about OS memory amounts and state
Memory current Health status.
It has three common states:

·         Available physical memory is high

·         Available physical memory is low

·         Physical memory usage is steady"


To freed up the memory
DBCC FREESYSTEMCACHE (‘ALL’) WITH MARK_IN_USE_FOR_REMOVAL;

DBCC FREESESSIONCACHE WITH NO_INFOMSGS;

GO

DBCC DROPCLEANBUFFERS

DBCC FREEPROCCACHE;
'' as [Desc]
FROM [@dbname].sys.dm_os_sys_memory WITH(NOLOCK);')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (2, N'fetch_sql_os_sql_info', N'SELECT host_platform, host_distribution, host_release,  host_service_pack_level, host_sku,  @@SERVERNAME AS [Server Name], @@VERSION AS [SQL Server and OS Version Info],  SERVERPROPERTY(''InstanceName'') AS [Instance], SERVERPROPERTY(''IsClustered'') AS [IsClustered], SERVERPROPERTY(''ComputerNamePhysicalNetBIOS'') AS [ComputerNamePhysicalNetBIOS], SERVERPROPERTY(''Edition'') AS [Edition], SERVERPROPERTY(''ProductLevel'') AS [ProductLevel],				SERVERPROPERTY(''ProductUpdateLevel'') AS [ProductUpdateLevel],	SERVERPROPERTY(''ProductVersion'') AS [ProductVersion],SERVERPROPERTY(''ProductMajorVersion'') AS [ProductMajorVersion], SERVERPROPERTY(''ProductMinorVersion'') AS [ProductMinorVersion], SERVERPROPERTY(''ProductBuild'') AS [ProductBuild], SERVERPROPERTY(''ProductBuildType'') AS [ProductBuildType],			  SERVERPROPERTY(''ProductUpdateReference'') AS [ProductUpdateReference], SERVERPROPERTY(''ProcessID'') AS [ProcessID],SERVERPROPERTY(''Collation'') AS [Collation], SERVERPROPERTY(''IsFullTextInstalled'') AS [IsFullTextInstalled], SERVERPROPERTY(''IsIntegratedSecurityOnly'') AS [IsIntegratedSecurityOnly],SERVERPROPERTY(''FilestreamConfiguredLevel'') AS [FilestreamConfiguredLevel],SERVERPROPERTY(''IsHadrEnabled'') AS [IsHadrEnabled], SERVERPROPERTY(''HadrManagerStatus'') AS [HadrManagerStatus],SERVERPROPERTY(''InstanceDefaultDataPath'') AS [InstanceDefaultDataPath],SERVERPROPERTY(''InstanceDefaultLogPath'') AS [InstanceDefaultLogPath],SERVERPROPERTY(''BuildClrVersion'') AS [Build CLR Version],SERVERPROPERTY(''IsXTPSupported'') AS [IsXTPSupported],SERVERPROPERTY(''IsPolybaseInstalled'') AS [IsPolybaseInstalled],		SERVERPROPERTY(''IsAdvancedAnalyticsInstalled'') AS [IsRServicesInstalled]	 FROM [@dbname].sys.dm_os_host_info WITH (NOLOCK)   ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (3, N'fetch_sql_socket_info', N' EXEC sys.xp_readerrorlog 0, 1, N''detected'', N''socket'';')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (4, N'fetch_os_wait_status_signal', N'SELECT CAST(100.0 * SUM(signal_wait_time_ms) / SUM (wait_time_ms) AS NUMERIC(20,2))  AS [%signal (cpu) waits],  CAST(100.0 * SUM(wait_time_ms - signal_wait_time_ms) / SUM (wait_time_ms) AS NUMERIC(20,2))  AS [%resource waits] FROM [@dbname].sys.dm_os_wait_stats ; ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (5, N'fetch_sql_memory_info', N' SELECT physical_memory_in_use_kb/1024 AS [SQL Server Memory Usage (MB)],  	   locked_page_allocations_kb/1024 AS [SQL Server Locked Pages Allocation (MB)],         large_page_allocations_kb/1024 AS [SQL Server Large Pages Allocation (MB)],   	   page_fault_count, memory_utilization_percentage, available_commit_limit_kb,  	   process_physical_memory_low, process_virtual_memory_low  FROM [@dbname].sys.dm_os_process_memory WITH (NOLOCK)  ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (6, N'fetch_drive_level_latency_info', N' SELECT tab.[Drive], tab.volume_mount_point AS [Volume Mount Point],  	CASE 		WHEN num_of_reads = 0 THEN 0  		ELSE (io_stall_read_ms/num_of_reads) 	END AS [Read Latency],	CASE 		WHEN num_of_writes = 0 THEN 0 		ELSE (io_stall_write_ms/num_of_writes) 	END AS [Write Latency],	CASE 		WHEN (num_of_reads = 0 AND num_of_writes = 0) THEN 0 		ELSE (io_stall/(num_of_reads + num_of_writes)) END AS [Overall Latency],CASE 		WHEN num_of_reads = 0 THEN 0 		ELSE (num_of_bytes_read/num_of_reads) 	END AS [Avg Bytes/Read],	CASE 		WHEN num_of_writes = 0 THEN 0 		ELSE (num_of_bytes_written/num_of_writes) 	END AS [Avg Bytes/Write],	CASE 		WHEN (num_of_reads = 0 AND num_of_writes = 0) THEN 0 		ELSE ((num_of_bytes_read + num_of_bytes_written)/(num_of_reads + num_of_writes)) 	END AS [Avg Bytes/Transfer]FROM (SELECT LEFT(UPPER(mf.physical_name), 2) AS Drive, SUM(num_of_reads) AS num_of_reads,	         SUM(io_stall_read_ms) AS io_stall_read_ms, SUM(num_of_writes) AS num_of_writes,	         SUM(io_stall_write_ms) AS io_stall_write_ms, SUM(num_of_bytes_read) AS num_of_bytes_read,	         SUM(num_of_bytes_written) AS num_of_bytes_written, SUM(io_stall) AS io_stall, vs.volume_mount_point       FROM [@dbname].sys.dm_io_virtual_file_stats(NULL, NULL) AS vfs      INNER JOIN [@dbname].sys.master_files AS mf WITH (NOLOCK)      ON vfs.database_id = mf.database_id AND vfs.file_id = mf.file_id	  CROSS APPLY [@dbname].sys.dm_os_volume_stats(mf.database_id, mf.[file_id]) AS vs       GROUP BY LEFT(UPPER(mf.physical_name), 2), vs.volume_mount_point) AS tab ORDER BY [Overall Latency] ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (7, N'fetch_lock_waits', N' SELECT o.name AS [table_name], i.name AS [index_name], ios.index_id, ios.partition_number,  		SUM(ios.row_lock_wait_count) AS [total_row_lock_waits],   		SUM(ios.row_lock_wait_in_ms) AS [total_row_lock_wait_in_ms],  		SUM(ios.page_lock_wait_count) AS [total_page_lock_waits],  		SUM(ios.page_lock_wait_in_ms) AS [total_page_lock_wait_in_ms],  		SUM(ios.page_lock_wait_in_ms)+ SUM(row_lock_wait_in_ms) AS [total_lock_wait_in_ms]  FROM [@dbname].sys.dm_db_index_operational_stats(DB_ID(), NULL, NULL, NULL) AS ios  INNER JOIN [@dbname].sys.objects AS o WITH (NOLOCK)  ON ios.[object_id] = o.[object_id]  INNER JOIN [@dbname].sys.indexes AS i WITH (NOLOCK)  ON ios.[object_id] = i.[object_id]   AND ios.index_id = i.index_id  WHERE o.[object_id] > 100  GROUP BY o.name, i.name, ios.index_id, ios.partition_number  HAVING SUM(ios.page_lock_wait_in_ms)+ SUM(row_lock_wait_in_ms) > 0  ORDER BY total_lock_wait_in_ms DESC  ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (8, N'fetch_wait_stats_top_Info', N' WITH [Waits]   AS (SELECT wait_type, wait_time_ms/ 1000.0 AS [WaitS],            (wait_time_ms - signal_wait_time_ms) / 1000.0 AS [ResourceS],             signal_wait_time_ms / 1000.0 AS [SignalS],             waiting_tasks_count AS [WaitCount],             100.0 *  wait_time_ms / SUM (wait_time_ms) OVER() AS [Percentage],             ROW_NUMBER() OVER(ORDER BY wait_time_ms DESC) AS [RowNum]      FROM [@dbname].sys.dm_os_wait_stats WITH (NOLOCK)      WHERE [wait_type] NOT IN (            N''BROKER_EVENTHANDLER'', N''BROKER_RECEIVE_WAITFOR'', N''BROKER_TASK_STOP'',  		N''BROKER_TO_FLUSH'', N''BROKER_TRANSMITTER'', N''CHECKPOINT_QUEUE'',          N''CHKPT'', N''CLR_AUTO_EVENT'', N''CLR_MANUAL_EVENT'', N''CLR_SEMAPHORE'', N''CXCONSUMER'',           N''DBMIRROR_DBM_EVENT'', N''DBMIRROR_EVENTS_QUEUE'', N''DBMIRROR_WORKER_QUEUE'',   		N''DBMIRRORING_CMD'', N''DIRTY_PAGE_POLL'', N''DISPATCHER_QUEUE_SEMAPHORE'',          N''EXECSYNC'', N''FSAGENT'', N''FT_IFTS_SCHEDULER_IDLE_WAIT'', N''FT_IFTSHC_MUTEX'',          N''HADR_CLUSAPI_CALL'', N''HADR_FILESTREAM_IOMGR_IOCOMPLETION'', N''HADR_LOGCAPTURE_WAIT'',   		N''HADR_NOTIFICATION_DEQUEUE'', N''HADR_TIMER_TASK'', N''HADR_WORK_QUEUE'',          N''KSOURCE_WAKEUP'', N''LAZYWRITER_SLEEP'', N''LOGMGR_QUEUE'',   		N''MEMORY_ALLOCATION_EXT'', N''ONDEMAND_TASK_QUEUE'',  		N''PARALLEL_REDO_DRAIN_WORKER'', N''PARALLEL_REDO_LOG_CACHE'', N''PARALLEL_REDO_TRAN_LIST'',  		N''PARALLEL_REDO_WORKER_SYNC'', N''PARALLEL_REDO_WORKER_WAIT_WORK'',    		N''PREEMPTIVE_HADR_LEASE_MECHANISM'', N''PREEMPTIVE_SP_SERVER_DIAGNOSTICS'',  		N''PREEMPTIVE_OS_LIBRARYOPS'', N''PREEMPTIVE_OS_COMOPS'', N''PREEMPTIVE_OS_CRYPTOPS'',   		N''PREEMPTIVE_OS_PIPEOPS'', N''PREEMPTIVE_OS_AUTHENTICATIONOPS'',  		N''PREEMPTIVE_OS_GENERICOPS'', N''PREEMPTIVE_OS_VERIFYTRUST'',   		N''PREEMPTIVE_OS_FILEOPS'', N''PREEMPTIVE_OS_DEVICEOPS'', N''PREEMPTIVE_OS_QUERYREGISTRY'',  		N''PREEMPTIVE_OS_WRITEFILE'',  		N''PREEMPTIVE_XE_CALLBACKEXECUTE'', N''PREEMPTIVE_XE_DISPATCHER'',  		N''PREEMPTIVE_XE_GETTARGETSTATE'', N''PREEMPTIVE_XE_SESSIONCOMMIT'',  		N''PREEMPTIVE_XE_TARGETINIT'', N''PREEMPTIVE_XE_TARGETFINALIZE'',          N''PWAIT_ALL_COMPONENTS_INITIALIZED'', N''PWAIT_DIRECTLOGCONSUMER_GETNEXT'',  		N''QDS_PERSIST_TASK_MAIN_LOOP_SLEEP'',    		N''QDS_ASYNC_QUEUE'',            N''QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP'', N''REQUEST_FOR_DEADLOCK_SEARCH'',    		N''RESOURCE_QUEUE'', N''SERVER_IDLE_CHECK'', N''SLEEP_BPOOL_FLUSH'', N''SLEEP_DBSTARTUP'',    		N''SLEEP_DCOMSTARTUP'', N''SLEEP_MASTERDBREADY'', N''SLEEP_MASTERMDREADY'',           N''SLEEP_MASTERUPGRADED'', N''SLEEP_MSDBSTARTUP'', N''SLEEP_SYSTEMTASK'', N''SLEEP_TASK'',          N''SLEEP_TEMPDBSTARTUP'', N''SNI_HTTP_ACCEPT'', N''SP_SERVER_DIAGNOSTICS_SLEEP'',  		N''SQLTRACE_BUFFER_FLUSH'', N''SQLTRACE_INCREMENTAL_FLUSH_SLEEP'', N''SQLTRACE_WAIT_ENTRIES'',    		N''WAIT_FOR_RESULTS'', N''WAITFOR'', N''WAITFOR_TASKSHUTDOWN'', N''WAIT_XTP_HOST_WAIT'',   		N''WAIT_XTP_OFFLINE_CKPT_NEW_LOG'', N''WAIT_XTP_CKPT_CLOSE'', N''WAIT_XTP_RECOVERY'',  		N''XE_BUFFERMGR_ALLPROCESSED_EVENT'', N''XE_DISPATCHER_JOIN'',          N''XE_DISPATCHER_WAIT'', N''XE_LIVE_TARGET_TVF'', N''XE_TIMER_EVENT'')      AND waiting_tasks_count > 0)  SELECT   MAX (W1.wait_type) AS [WaitType],  	CAST (MAX (W1.Percentage) AS DECIMAL (5,2)) AS [Wait Percentage],  	CAST ((MAX (W1.WaitS) / MAX (W1.WaitCount)) AS DECIMAL (16,4)) AS [AvgWait_Sec],      CAST ((MAX (W1.ResourceS) / MAX (W1.WaitCount)) AS DECIMAL (16,4)) AS [AvgRes_Sec],      CAST ((MAX (W1.SignalS) / MAX (W1.WaitCount)) AS DECIMAL (16,4)) AS [AvgSig_Sec],       CAST (MAX (W1.WaitS) AS DECIMAL (16,2)) AS [Wait_Sec],       CAST (MAX (W1.ResourceS) AS DECIMAL (16,2)) AS [Resource_Sec],      CAST (MAX (W1.SignalS) AS DECIMAL (16,2)) AS [Signal_Sec],      MAX (W1.WaitCount) AS [Wait Count],  	CAST (N''https://www.sqlskills.com/help/waits/'' + W1.wait_type AS XML) AS [Help/Info URL]   FROM Waits AS W1  INNER JOIN Waits AS W2  ON W2.RowNum <= W1.RowNum  GROUP BY W1.RowNum, W1.wait_type  HAVING SUM (W2.Percentage) - MAX (W1.Percentage) < 99   ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (9, N'fetch_file_size_space_avaialbe_info', N' with wfs   AS (  	SELECT sum((f.SIZE * 8.0 / 1024.0) / 1024.0) FileSize_in_GB  	FROM sys.master_files AS f  	CROSS APPLY sys.dm_os_volume_stats(f.database_id, f.file_id)  	)  SELECT db_name(f.database_id) dbname  	,file_name(f.file_id) FileName  	,(f.SIZE * 8.0 / 1024.0) / 1024.0 FileSize_in_GB  	,((f.SIZE * 8.0 / 1024.0) / 1024.0) / (  		SELECT FileSize_in_GB  		FROM wfs  		) * 100 FileSize_in_Perc_in_Total  	,(volume_mount_point)  	,(total_bytes / 1048576) / 1024.0 AS Disk_Size_in_GB  	,(available_bytes / 1048576) / 1024.0 AS Disk_Free_in_GB  	,(  		SELECT ((available_bytes / 1048576 * 1.0) / (total_bytes / 1048576 * 1.0) * 100)  		) AS Disk_FreePercentage  	,f.physical_name Physical_File_Path  	,f.is_percent_growth  	,f.growth   FROM sys.master_files AS f  CROSS APPLY sys.dm_os_volume_stats(f.database_id, f.file_id)  ORDER BY 1 ASC  ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (10, N'fetch_cpu_utilization_info', N' SELECT ROW_NUMBER() OVER(ORDER BY [CPU_Time_Ms] DESC) AS [CPU Rank],         [Database Name], [CPU_Time_Ms] AS [CPU Time (ms)],          CAST([CPU_Time_Ms] * 1.0 / SUM([CPU_Time_Ms]) OVER() * 100.0 AS DECIMAL(5, 2)) AS [CPU Percent]  FROM (SELECT pa.DatabaseID, DB_Name(pa.DatabaseID) AS [Database Name], SUM(qs.total_worker_time/1000) AS [CPU_Time_Ms]   FROM [@dbname].sys.dm_exec_query_stats AS qs WITH (NOLOCK)   CROSS APPLY (SELECT CONVERT(int, value) AS [DatabaseID]                 FROM [@dbname].sys.dm_exec_plan_attributes(qs.plan_handle)                WHERE attribute = N''dbid'') AS pa  GROUP BY DatabaseID) a  WHERE DatabaseID <> 32767   ORDER BY [CPU Rank]  ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (12, N'fetch_io_utilization_info', N' SELECT ROW_NUMBER() OVER (ORDER BY ioTotalMB DESC) AS [I/O Rank],  [Database Name], ioTotalMB AS [Total I/O (MB)],  CAST(ioTotalMB / SUM(ioTotalMB) OVER () * 100.0 AS DECIMAL(5, 2)) AS [Total I/O %],  ioReadMB AS [Read I/O (MB)],   CAST(ioReadMB / SUM(ioReadMB) OVER () * 100.0 AS DECIMAL(5, 2)) AS [Read I/O %],  ioWriteMB AS [Write I/O (MB)],   CAST(ioWriteMB / SUM(ioWriteMB) OVER () * 100.0 AS DECIMAL(5, 2)) AS [Write I/O %]  FROM (SELECT DB_NAME(database_id) AS [Database Name],      CAST(SUM(num_of_bytes_read + num_of_bytes_written) / 1048576 AS DECIMAL(12, 2)) AS [ioTotalMB],      CAST(SUM(num_of_bytes_read ) / 1048576 AS DECIMAL(12, 2)) AS [ioReadMB],      CAST(SUM(num_of_bytes_written) / 1048576 AS DECIMAL(12, 2)) AS [ioWriteMB]      FROM [@dbname].sys.dm_io_virtual_file_stats(NULL, NULL) AS [DM_IO_STATS] where DB_NAME(database_id) not in (''ReportServer_SSRSTempDB'',''ReportServerTempDB'',''ReportServer_SSRS'',''ReportServer'',''ReportServerPBITempDB'',''ReportServerPBI'',''model'',''tempdb'',''msdb'',''ReportServer'',''ReportServerTempDB'',''msdb'',''ReportServerPBITempDB'',''SSISDB'',''tempdb'',''ReportServer_SSRS'',''ReportServer_SSRSTempDB'',''master'','''')      GROUP BY database_id) Aggregate_IO_Statistics  ORDER BY [I/O Rank]  ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (13, N'fetch_db_level_latency_info', N'SELECT DB_NAME(fs.database_id) AS [Database Name], CAST(fs.io_stall_read_ms/(1.0 + fs.num_of_reads) AS NUMERIC(10,1)) AS [avg_read_latency_ms], CAST(fs.io_stall_write_ms/(1.0 + fs.num_of_writes) AS NUMERIC(10,1)) AS [avg_write_latency_ms], CAST((fs.io_stall_read_ms + fs.io_stall_write_ms)/(1.0 + fs.num_of_reads + fs.num_of_writes) AS NUMERIC(10,1)) AS [avg_io_latency_ms], CONVERT(DECIMAL(18,2), mf.size/128.0) AS [File Size (MB)], mf.physical_name, mf.type_desc, fs.io_stall_read_ms, fs.num_of_reads,  fs.io_stall_write_ms, fs.num_of_writes, fs.io_stall_read_ms + fs.io_stall_write_ms AS [io_stalls], fs.num_of_reads + fs.num_of_writes AS [total_io], io_stall_queued_read_ms AS [Resource Governor Total Read IO Latency (ms)], io_stall_queued_write_ms AS [Resource Governor Total Write IO Latency (ms)]  FROM [@dbname].sys.dm_io_virtual_file_stats(null,null) AS fs  INNER JOIN [@dbname].sys.master_files AS mf WITH (NOLOCK)  ON fs.database_id = mf.database_id AND fs.[file_id] = mf.[file_id] where DB_NAME(fs.database_id) not in (''ReportServer_SSRSTempDB'',''ReportServerTempDB'',''ReportServer_SSRS'',''ReportServer'',''ReportServerPBITempDB'',''ReportServerPBI'',''model'',''tempdb'',''msdb'',''ReportServer'',''ReportServerTempDB'',''msdb'',''ReportServerPBITempDB'',''SSISDB'',''tempdb'',''ReportServer_SSRS'',''ReportServer_SSRSTempDB'',''master'','''') ORDER BY avg_io_latency_ms DESC ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (14, N'fetch_top_logical_reads_info', N' SELECT TOP(50) DB_NAME(t.[dbid]) AS [Database Name],  t.[text] AS [Short Query Text],   qs.total_logical_reads AS [Total Logical Reads],  qs.min_logical_reads AS [Min Logical Reads],  qs.total_logical_reads/qs.execution_count AS [Avg Logical Reads],  qs.max_logical_reads AS [Max Logical Reads],     qs.min_worker_time AS [Min Worker Time],  qs.total_worker_time/qs.execution_count AS [Avg Worker Time],   qs.max_worker_time AS [Max Worker Time],   qs.min_elapsed_time AS [Min Elapsed Time],   qs.total_elapsed_time/qs.execution_count AS [Avg Elapsed Time],   qs.max_elapsed_time AS [Max Elapsed Time],  qs.execution_count AS [Execution Count],   CASE WHEN CONVERT(nvarchar(max), qp.query_plan) LIKE N''%<MissingIndexes>%'' THEN 1 ELSE 0 END AS [Has Missing Index],  qs.creation_time AS [Creation Time]  FROM [@dbname].sys.dm_exec_query_stats AS qs WITH (NOLOCK)  CROSS APPLY [@dbname].sys.dm_exec_sql_text(plan_handle) AS t   CROSS APPLY [@dbname].sys.dm_exec_query_plan(plan_handle) AS qp  where DB_NAME(t.[dbid]) not in (''ReportServer_SSRSTempDB'',''ReportServerTempDB'',''ReportServer_SSRS'',''ReportServer'',''ReportServerPBITempDB'',''ReportServerPBI'',''model'',''tempdb'',''msdb'',''ReportServer'',''ReportServerTempDB'',''msdb'',''ReportServerPBITempDB'',''SSISDB'',''tempdb'',''ReportServer_SSRS'',''ReportServer_SSRSTempDB'',''master'','''')  and (cast(t.[text] as nvarchar(max)) not like ''%dm_exec_query_stats%''  or cast(t.[text] as nvarchar(max)) not like ''%dm_exec_sql_text%''  or cast(t.[text] as nvarchar(max)) not like ''%dm_exec_query_plan%''  )  ORDER BY qs.total_logical_reads DESC ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (15, N'fetch_proc_logical_physical_wr_info', N' SELECT TOP(25) p.name AS [SP Name], qs.total_logical_writes AS [TotalLogicalWrites], qs.total_logical_reads, qs.total_physical_reads AS [TotalPhysicalReads],   qs.total_logical_writes/qs.execution_count AS [AvgLogicalWrites],qs.total_physical_reads/qs.execution_count AS [AvgPhysicalReads], qs.execution_count,  ISNULL(qs.execution_count/DATEDIFF(Minute, qs.cached_time, GETDATE()), 0) AS [Calls/Minute],  qs.total_elapsed_time, qs.total_elapsed_time/qs.execution_count AS [avg_elapsed_time],  CASE WHEN CONVERT(nvarchar(max), qp.query_plan) LIKE N''%<MissingIndexes>%'' THEN 1 ELSE 0 END AS [Has Missing Index],   FORMAT(qs.last_execution_time, ''yyyy-MM-dd HH:mm:ss'', ''en-US'') AS [Last Execution Time],   FORMAT(qs.cached_time, ''yyyy-MM-dd HH:mm:ss'', ''en-US'') AS [Plan Cached Time]  FROM [@dbname].sys.procedures AS p WITH (NOLOCK)  INNER JOIN [@dbname].sys.dm_exec_procedure_stats AS qs WITH (NOLOCK)  ON p.[object_id] = qs.[object_id]  CROSS APPLY [@dbname].sys.dm_exec_query_plan(qs.plan_handle) AS qp  WHERE qs.database_id = DB_ID()  AND DATEDIFF(Minute, qs.cached_time, GETDATE()) > 0  ORDER BY qs.total_logical_writes DESC  ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (16, N'fetch_proc_query_expensive', N' SELECT A.*  FROM  (      SELECT DB_NAME(qt.dbid) dbname,              OBJECT_NAME(qt.objectid, qt.dbid) AS [Stored procedure name],              SUBSTRING(qt.TEXT, (qs.statement_start_offset / 2) + 1, ((CASE qs.statement_end_offset                                                                           WHEN -1                                                                           THEN DATALENGTH(qt.TEXT)                                                                           ELSE qs.statement_end_offset                                                                       END - qs.statement_start_offset) / 2) + 1) Query,             qs.last_execution_time,              ((qs.last_elapsed_time / 1000000.0) / 60.0) / 60.0 last_elapsed_time_in_hrs,              (qs.last_elapsed_time / 1000000.0) / 60.0 last_elapsed_time_in_m,              qs.last_elapsed_time / 1000000.0 last_elapsed_time_in_S,              (qs.total_elapsed_time / 1000000.0) / 60.0 total_elapsed_time_in_m,              qs.total_elapsed_time / 1000000.0 total_elapsed_time_in_S,              qs.execution_count,   qs.total_logical_reads,            qs.last_logical_reads,            qs.total_logical_writes,            qs.last_logical_writes,   qs.total_worker_time,            qs.last_worker_time  FROM [@dbname].sys.dm_exec_query_stats qs         CROSS APPLY [@dbname].sys.dm_exec_sql_text(qs.sql_handle) qt  ) a INNER JOIN (     SELECT [Stored procedure name],             Query,             MAX(last_execution_time) last_execution_time     FROM   (        SELECT OBJECT_NAME(qt.objectid, qt.dbid) AS [Stored procedure name],              SUBSTRING(qt.TEXT, (qs.statement_start_offset / 2) + 1, ((CASE qs.statement_end_offset  WHEN-1  THEN DATALENGTH(qt.TEXT)  ELSE qs.statement_end_offset  END - qs.statement_start_offset) / 2) + 1) Query,   qs.last_execution_time  FROM [@dbname].sys.dm_exec_query_stats qs       CROSS APPLY [@dbname].sys.dm_exec_sql_text(qs.sql_handle) qt  ) A    GROUP BY [Stored procedure name],            Query  ) qt ON qt.[Stored procedure name] = a.[Stored procedure name]          AND qt.Query = a.Query          AND qt.last_execution_time = a.last_execution_time  WHERE A.dbname = ''[@dbname]''  ORDER BY last_elapsed_time_in_S DESC; ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (17, N'fetch_expensive_queries', N' SELECT TOP 10 SUBSTRING(qt.TEXT, (qs.statement_start_offset / 2) + 1, ((CASE qs.statement_end_offset  WHEN -1  THEN DATALENGTH(qt.TEXT)  ELSE qs.statement_end_offset  END - qs.statement_start_offset) / 2) + 1),   qs.execution_count,   qs.total_logical_reads,   qs.last_logical_reads,   qs.total_logical_writes,   qs.last_logical_writes,   qs.total_worker_time,   qs.last_worker_time,   qs.total_elapsed_time / 1000000 total_elapsed_time_in_S,   qs.last_elapsed_time / 1000000 last_elapsed_time_in_S,   qs.last_execution_time,   qp.query_plan  FROM [@dbname].sys.dm_exec_query_stats qs       CROSS APPLY [@dbname].sys.dm_exec_sql_text(qs.sql_handle) qt       CROSS APPLY [@dbname].sys.dm_exec_query_plan(qs.plan_handle) qp  ORDER BY qs.total_logical_reads DESC;  ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (18, N'fetch_proc_query_avg_inputoutput_usage_info', N' SELECT TOP(50) OBJECT_NAME(qt.objectid, dbid) AS [SP Name],  (qs.total_logical_reads + qs.total_logical_writes) /qs.execution_count AS [Avg IO], qs.execution_count AS [Execution Count],  SUBSTRING(qt.[text],qs.statement_start_offset/2,   	(CASE   		WHEN qs.statement_end_offset = -1   	 THEN LEN(CONVERT(nvarchar(max), qt.[text])) * 2   		ELSE qs.statement_end_offset   	 END - qs.statement_start_offset)/2) AS [Query Text]	   FROM [@dbname].sys.dm_exec_query_stats AS qs WITH (NOLOCK)  CROSS APPLY [@dbname].sys.dm_exec_sql_text(qs.sql_handle) AS qt  WHERE qt.[dbid] = DB_ID()  ORDER BY [Avg IO] DESC ; ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (20, N'fetch_missing_indexes_info', N'SELECT CONVERT(decimal(18,2), user_seeks * avg_total_user_cost * (avg_user_impact * 0.01)) AS [index_advantage], FORMAT(migs.last_user_seek, ''yyyy-MM-dd HH:mm:ss'') AS [last_user_seek],   mid.[statement] AS [Database.Schema.Table],  COUNT(1) OVER(PARTITION BY mid.[statement]) AS [missing_indexes_for_table], COUNT(1) OVER(PARTITION BY mid.[statement], equality_columns) AS [similar_missing_indexes_for_table],  mid.equality_columns, mid.inequality_columns, mid.included_columns,  migs.unique_compiles, migs.user_seeks,  CONVERT(decimal(18,2), migs.avg_total_user_cost) AS [avg_total_user_cost], migs.avg_user_impact  FROM [@dbname].sys.dm_db_missing_index_group_stats AS migs WITH (NOLOCK)  INNER JOIN [@dbname].sys.dm_db_missing_index_groups AS mig WITH (NOLOCK)  ON migs.group_handle = mig.index_group_handle  INNER JOIN [@dbname].sys.dm_db_missing_index_details AS mid WITH (NOLOCK)    ON mig.index_handle = mid.index_handle  ORDER BY index_advantage DESC  ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (21, N'fetch_unused_indexes_info', N' SELECT o.name AS ObjectName, i.name AS IndexName, i.index_id AS IndexID, dm_ius.user_seeks AS UserSeek, dm_ius.user_scans AS UserScans  , dm_ius.user_lookups AS UserLookups, dm_ius.user_updates AS UserUpdates, p.TableRows, ''DROP INDEX '' + QUOTENAME(i.name)+ '' ON '' + QUOTENAME(s.name) + ''.''  + QUOTENAME(OBJECT_NAME(dm_ius.OBJECT_ID)) AS ''drop statement''  FROM [@dbname].sys.dm_db_index_usage_stats dm_ius  INNER JOIN [@dbname].sys.indexes i ON i.index_id = dm_ius.index_id   AND dm_ius.OBJECT_ID = i.OBJECT_ID  INNER JOIN [@dbname].sys.objects o ON dm_ius.OBJECT_ID = o.OBJECT_ID  INNER JOIN [@dbname].sys.schemas s ON o.schema_id = s.schema_id  INNER JOIN (SELECT SUM(p.rows) TableRows, p.index_id, p.OBJECT_ID  FROM [@dbname].sys.partitions p GROUP BY p.index_id, p.OBJECT_ID) p  ON p.index_id = dm_ius.index_id AND dm_ius.OBJECT_ID = p.OBJECT_ID  WHERE OBJECTPROPERTY(dm_ius.OBJECT_ID,''IsUserTable'') = 1  AND dm_ius.database_id = DB_ID()  AND i.type_desc = ''nonclustered''  AND i.is_primary_key = 0  AND i.is_unique_constraint = 0  ORDER BY (dm_ius.user_seeks + dm_ius.user_scans + dm_ius.user_lookups) ASC ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (22, N'fetch_index_read_writes_info', N' SELECT OBJECT_NAME(i.[object_id]) AS [ObjectName], i.[name] AS [IndexName], i.index_id,    	   s.user_updates AS [index_Writes], s.user_seeks + s.user_scans + s.user_lookups AS [Index_Reads],  	   i.[type_desc] AS [Index Type], i.fill_factor AS [Fill Factor], i.has_filter, i.filter_definition,  	   s.last_system_update, s.last_user_update  FROM [@dbname].sys.indexes AS i WITH (NOLOCK)  LEFT OUTER JOIN [@dbname].sys.dm_db_index_usage_stats AS s WITH (NOLOCK)  ON i.[object_id] = s.[object_id]  AND i.index_id = s.index_id  AND s.database_id = DB_ID()  WHERE OBJECTPROPERTY(i.[object_id],''IsUserTable'') = 1  ORDER BY s.user_updates DESC  ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (23, N'fetch_index_high_writes_low_reads_info', N' SELECT SCHEMA_NAME(o.[schema_id]) AS [Schema Name],     OBJECT_NAME(s.[object_id]) AS [Table Name],  i.name AS [Index Name], i.index_id,   i.is_disabled, i.is_hypothetical, i.has_filter, i.fill_factor,  s.user_updates AS [Total Writes], s.user_seeks + s.user_scans + s.user_lookups AS [Total Reads],  s.user_updates - (s.user_seeks + s.user_scans + s.user_lookups) AS [Difference]  FROM [@dbname].sys.dm_db_index_usage_stats AS s WITH (NOLOCK)  INNER JOIN [@dbname].sys.indexes AS i WITH (NOLOCK)  ON s.[object_id] = i.[object_id]  AND i.index_id = s.index_id  INNER JOIN [@dbname].sys.objects AS o WITH (NOLOCK)  ON i.[object_id] = o.[object_id]  WHERE OBJECTPROPERTY(s.[object_id],''IsUserTable'') = 1  AND s.database_id = DB_ID()  AND s.user_updates > (s.user_seeks + s.user_scans + s.user_lookups)  AND i.index_id > 1 AND i.[type_desc] = N''NONCLUSTERED''  AND i.is_primary_key = 0 AND i.is_unique_constraint = 0 AND i.is_unique = 0  ORDER BY [Difference] DESC, [Total Writes] DESC, [Total Reads] ASC ; ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (24, N'fetch_is_query_store_on', N' SELECT name, is_query_store_on FROM sys.databases WHERE NAME NOT IN (''master'',''tempdb'',''model'',''msdb'') order by is_query_store_on desc')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (25, N'fetch_expensive_Jobs', N' SELECT j.Name AS ''Job Name'',   ''Max Duration'' = STUFF(STUFF(REPLACE(STR(maxdur.run_duration,7,0),          '' '',''0''),4,0,'':''),7,0,'':''),      ''Last Run Duration'' = STUFF(STUFF(REPLACE(STR(lastrun.run_duration,7,0),          '' '',''0''),4,0,'':''),7,0,'':''),  	''Job Enabled'' = CASE j.Enabled          WHEN 1 THEN ''Yes''          WHEN 0 THEN ''No''     END,  	''Last Start Date'' = CONVERT(DATETIME, RTRIM(lastrun.run_date) + '' ''         + STUFF(STUFF(REPLACE(STR(RTRIM(lastrun.run_time),6,0),           '' '',''0''),3,0,'':''),6,0,'':'')),  	''Next Start Date''= CONVERT(DATETIME, RTRIM(NULLIF(js.next_run_date, 0)) + '' ''          + STUFF(STUFF(REPLACE(STR(RTRIM(js.next_run_time),6,0),          '' '',''0''),3,0,'':''),6,0,'':'')),          ''Frequency'' = CASE s.freq_type          WHEN 1 THEN ''Once''          WHEN 4 THEN ''Daily''          WHEN 8 THEN ''Weekly''          WHEN 16 THEN ''Monthly''         WHEN 32 THEN ''Monthly relative''          WHEN 64 THEN ''When SQLServer Agent starts''     END,      ''Last Run Message'' = lastrun.message  FROM  msdb.dbo.sysjobs j  LEFT OUTER JOIN  msdb.dbo.sysjobschedules js    ON j.job_id = js.job_id LEFT OUTER JOIN  msdb.dbo.sysschedules s      ON js.schedule_id = s.schedule_id   LEFT OUTER JOIN (SELECT job_id, max(run_duration) AS run_duration   FROM  msdb.dbo.sysjobhistory   GROUP BY job_id) maxdur  ON j.job_id = maxdur.job_id  LEFT OUTER JOIN      (SELECT j1.job_id, j1.run_duration, j1.run_date, j1.run_time, j1.message      FROM  msdb.dbo.sysjobhistory j1      WHERE instance_id = (SELECT MAX(instance_id)                            FROM  msdb.dbo.sysjobhistory j2                            WHERE j2.job_id = j1.job_id)) lastrun      ON j.job_id = lastrun.job_id  ORDER BY STUFF(STUFF(REPLACE(STR(lastrun.run_duration,7,0), '' '',''0''),4,0,'':''),7,0,'':'') desc ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (26, N'fetch_tables_rows_count_info', N' SELECT concat(''['',SCHEMA_NAME(schema_id), ''].['', [Tables].name,'']'') AS [TableName],          SUM([Partitions].[rows]) AS [TotalRowCount],          CAST(ROUND((SUM(a.used_pages) / 128.00), 2) AS NUMERIC(36, 2)) AS Used_MB,          CAST(ROUND((SUM(a.total_pages) - SUM(a.used_pages)) / 128.00, 2) AS NUMERIC(36, 2)) AS Unused_MB,          CAST(ROUND((SUM(a.total_pages) / 128.00), 2) AS NUMERIC(36, 2)) AS Total_MB,          (CAST(ROUND((SUM(a.total_pages) / 128.00), 2) AS NUMERIC(36, 2))) / 1024.0 AS Total_gb,          GETDATE() LastTimeRun  FROM [@dbname].sys.tables AS [Tables]       JOIN [@dbname].sys.partitions AS [Partitions]       INNER JOIN [@dbname].sys.allocation_units a ON [Partitions].partition_id = a.container_id ON [Tables].[object_id] = [Partitions].[object_id]                                                                                          AND [Partitions].index_id IN(0, 1)  GROUP BY SCHEMA_NAME(schema_id),            [Tables].name  ORDER BY SUM([Partitions].[rows]) DESC; ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (27, N'fetch_table_column_size', N'DROP TABLE IF EXISTS #TablesColumnsSize;
CREATE TABLE #TablesColumnsSize
(tablename       VARCHAR(250), 
 columnname      VARCHAR(250), 
 datatype        VARCHAR(250), 
 char_max_length VARCHAR(250), 
 isnullable      VARCHAR(250), 
 columnsize      FLOAT
);
DECLARE MY_CURSOR CURSOR LOCAL FAST_FORWARD
FOR SELECT ''['' + A.[table_schema] + ''].['' + A.[table_name] + '']'', 
           A.column_name, 
           DATA_TYPE, 
           CHARACTER_MAXIMUM_LENGTH, 
           IS_NULLABLE
    FROM [@dbname].INFORMATION_SCHEMA.COLUMNS A
         INNER JOIN [@dbname].INFORMATION_SCHEMA.TABLES B ON A.TABLE_SCHEMA + ''.'' + A.TABLE_NAME = B.TABLE_SCHEMA + ''.'' + B.TABLE_NAME
    WHERE B.TABLE_TYPE = ''BASE TABLE'' and ''['' + A.[table_schema] + ''].['' + A.[table_name] + '']''=''@tablename'';
OPEN My_Cursor;
DECLARE @table VARCHAR(MAX), @column VARCHAR(MAX), @datatype VARCHAR(MAX), @char_max_length VARCHAR(MAX), @isnullable VARCHAR(MAX), @columnsize VARCHAR(MAX);
FETCH NEXT FROM MY_Cursor INTO @table, @column, @datatype, @char_max_length, @isnullable;
WHILE(@@FETCH_STATUS <> -1)
    BEGIN
        INSERT INTO #TablesColumnsSize
        (tablename, 
         columnname, 
         datatype, 
         char_max_length, 
         isnullable, 
         columnsize
        )
        EXEC (''SELECT ''''''+@table+'''''' TableName,  ''''''+@column+'''''' ColumnName,''''''+@datatype+'''''' datatype  ,''''''+@char_max_length+'''''' char_max_length,''''''+@isnullable+'''''' isnullable, sum(DATALENGTH([''+@column+''])) AS columnsize FROM [@dbname].''+@table+'' with (nolock)'');
        FETCH NEXT FROM MY_CURSOR INTO @table, @column, @datatype, @char_max_length, @isnullable;
    END;
CLOSE MY_CURSOR;
DEALLOCATE MY_CURSOR;
SELECT tablename, 
       columnname, 
       datatype, 
       char_max_length, 
       isnullable, 
       (columnsize / 1024.0) / 1024.0 columnsize_mb, 
       ((columnsize / 1024.0) / 1024.0) / 1024.0 columnsize_gb
FROM #TablesColumnsSize
ORDER BY columnsize DESC;

')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (28, N'fetch_top_elapsed_time_info', N' SELECT TOP(50) DB_NAME(t.[dbid]) AS [Database Name],   REPLACE(REPLACE(LEFT(t.[text], 255), CHAR(10),''''), CHAR(13),'''') AS [Short Query Text], qs.total_elapsed_time/qs.execution_count AS [Avg Elapsed Time],  qs.min_elapsed_time, qs.max_elapsed_time, qs.last_elapsed_time,  qs.execution_count AS [Execution Count],    qs.total_logical_reads/qs.execution_count AS [Avg Logical Reads],   qs.total_physical_reads/qs.execution_count AS [Avg Physical Reads],   qs.total_worker_time/qs.execution_count AS [Avg Worker Time],  CASE WHEN CONVERT(nvarchar(max), qp.query_plan) LIKE N''%<MissingIndexes>%'' THEN 1 ELSE 0 END AS [Has Missing Index],  qs.creation_time AS [Creation Time]  FROM [@dbname].sys.dm_exec_query_stats AS qs WITH (NOLOCK)  CROSS APPLY [@dbname].sys.dm_exec_sql_text(plan_handle) AS t   CROSS APPLY [@dbname].sys.dm_exec_query_plan(plan_handle) AS qp  where DB_NAME(t.[dbid]) not in (''ReportServer_SSRSTempDB'',''ReportServerTempDB'',''ReportServer_SSRS'',''ReportServer'',''ReportServerPBITempDB'',''ReportServerPBI'',''model'',''tempdb'',''msdb'',''ReportServer'',''ReportServerTempDB'',''msdb'',''ReportServerPBITempDB'',''SSISDB'',''tempdb'',''ReportServer_SSRS'',''ReportServer_SSRSTempDB'',''master'','''')  ORDER BY qs.total_elapsed_time/qs.execution_count DESC')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (29, N'fetch_buffer_usage_by_database_info', N' SELECT ROW_NUMBER() OVER(ORDER BY CachedSize DESC) AS [Buffer Pool Rank], [Database Name], CachedSize AS [Cached Size   (MB)],       CAST(CachedSize / SUM(CachedSize) OVER() * 100.0 AS DECIMAL(5,2)) AS [Buffer Pool Percent]  FROM (SELECT DB_NAME(database_id) AS [Database Name],  CAST(COUNT(*) * 8/1024.0 AS DECIMAL (10,2))  AS [CachedSize]  FROM [@dbname].sys.dm_os_buffer_descriptors WITH (NOLOCK)  WHERE database_id <> 32767 and DB_NAME(database_id) not in (''ReportServer_SSRSTempDB'',''ReportServerTempDB'',''ReportServer_SSRS'',''ReportServer'',''ReportServerPBITempDB'',''ReportServerPBI'',''model'',''tempdb'',''msdb'',''ReportServer'',''ReportServerTempDB'',''msdb'',''ReportServerPBITempDB'',''SSISDB'',''tempdb'',''ReportServer_SSRS'',''ReportServer_SSRSTempDB'',''master'','''')  GROUP BY DB_NAME(database_id)) AggregateBufferPoolUsage  ORDER BY [Buffer Pool Rank]  ')
GO
INSERT [dbo].[perfqueries] ([id], [perfname], [perfquery]) VALUES (30, N'fetch_all_tables', N'select ''[''+TABLE_SCHEMA +''].[''+  TABLE_NAME+'']'' tablename from INFORMATION_SCHEMA.TABLES
WHERE TABLE_TYPE=''BASE TABLE''')
GO
SET IDENTITY_INSERT [dbo].[perfqueries] OFF
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_perfqueries]    Script Date: 27/11/2019 3:11:31 PM ******/
ALTER TABLE [dbo].[perfqueries] ADD  CONSTRAINT [IX_perfqueries] UNIQUE NONCLUSTERED 
(
	[perfname] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
